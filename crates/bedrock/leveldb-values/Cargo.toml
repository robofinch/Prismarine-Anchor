[package]
name = "prismarine-anchor-leveldb-values"
authors = ["Finley Huggins"]
license.workspace = true
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[dependencies]
prismarine-anchor-mc-datatypes  = { workspace = true, optional = true }
prismarine-anchor-nbt           = { workspace = true, optional = true }
prismarine-anchor-util          = { workspace = true, optional = true }

bijective-enum-map  = { workspace = true, optional = true }
indexmap            = { workspace = true, optional = true }
log                 = { workspace = true, optional = true }
subslice-to-array   = { workspace = true, optional = true }
thiserror           = { workspace = true, optional = true }
vecmap-rs           = { workspace = true, optional = true }
xxhash-rust         = { workspace = true, optional = true }
zerocopy            = { workspace = true, features = ["derive"], optional = true }

# NOTE:
# All these features are assumed to be independent of each other
# (well, aside from whatever dependencies they have);
# that is, if a feature is enabled, then the behavior of the code enabled by that feature
# should not change in any substantial way if a different feature is enabled.
#
# An exception is `derive_standard`.
#
# (A half-exception is enabling `prismarine-anchor-nbt/preserve_order`, but provided that
# no code here uses the NBT compound's internal map type, that's fine.
# Going from an unspecified order to a specific order is not a breaking change.)
#
# This assumption allows testing to be faster; we need only test each feature individually.
[features]
derive_standard = ["prismarine-anchor-mc-datatypes?/derive_standard"]
all = [
    "dimensioned_chunk_pos", "actor_id", "uuid", "nibble_array",

    "block_volume", "concatenated_nbt_compounds", "heightmap", "legacy_biome_data",
    "nbt_compound_conversion", "palettized_storage",

    "chunk_version", "actor_digest_version",
    "data_3d", "data_2d", "legacy_data_2d",
    "subchunk_blocks", "legacy_terrain", "legacy_extra_block_data",
    "border_blocks", "hardcoded_spawners", "aabb_volumes",
    "checksums", "metadata",
    "finalized_state", "biome_state", "blending_data", "actor_digest",
    "flat_world_layers", "level_spawn_was_fixed"
]
dimensioned_chunk_pos       = [
    "prismarine-anchor-mc-datatypes/positions", "prismarine-anchor-mc-datatypes/dimensions",
    "dep:subslice-to-array"
]
actor_id                    = []
uuid                        = ["dep:prismarine-anchor-util", "dep:log", "dep:subslice-to-array"]
nibble_array                = ["prismarine-anchor-mc-datatypes/positions"]

block_volume                = ["dep:log"]
concatenated_nbt_compounds  = ["dep:prismarine-anchor-nbt", "dep:prismarine-anchor-util"]
heightmap                   = ["dep:zerocopy"]
legacy_biome_data          = ["dep:zerocopy"]
nbt_compound_conversion     = ["dep:prismarine-anchor-nbt"]
palettized_storage          = ["dep:thiserror", "dep:zerocopy"]

chunk_version               = ["prismarine-anchor-mc-datatypes/version", "dep:bijective-enum-map"]
actor_digest_version        = ["prismarine-anchor-mc-datatypes/version", "dep:bijective-enum-map"]
data_3d                     = [
    "heightmap", "palettized_storage", "dep:prismarine-anchor-util",
    "dep:subslice-to-array", "dep:zerocopy"
]
data_2d                     = ["heightmap", "legacy_biome_data", "dep:subslice-to-array"]
legacy_data_2d              = [
    "heightmap", "legacy_biome_data",
    "dep:log", "dep:subslice-to-array"
]
subchunk_blocks             = [
    "nibble_array", "palettized_storage",
    "dep:prismarine-anchor-nbt", "dep:prismarine-anchor-util",
    "dep:log", "dep:subslice-to-array", "dep:thiserror"
]
legacy_terrain              = [
    "heightmap", "legacy_biome_data", "nibble_array",
    "dep:subslice-to-array"
]
legacy_extra_block_data     = [
    "prismarine-anchor-mc-datatypes/positions", "dep:subslice-to-array", "dep:vecmap-rs"
]
border_blocks               = [
    "prismarine-anchor-mc-datatypes/positions", "prismarine-anchor-mc-datatypes/derive_standard",
    "dep:vecmap-rs"
]
hardcoded_spawners          = [
    "block_volume", "dep:bijective-enum-map", "dep:log", "dep:subslice-to-array"
]
aabb_volumes                = [
    "block_volume", "prismarine-anchor-mc-datatypes/identifier", "dep:prismarine-anchor-util",
    "dep:subslice-to-array", "dep:vecmap-rs"
]
checksums                   = [
    "dep:prismarine-anchor-util",
    "dep:vecmap-rs", "dep:subslice-to-array", "dep:xxhash-rust"
]
metadata                    = [
    "prismarine-anchor-mc-datatypes/dimensions", "prismarine-anchor-nbt/preserve_order",
    "dep:prismarine-anchor-util",
    "dep:bijective-enum-map", "dep:indexmap", "dep:subslice-to-array", "dep:thiserror",
    "dep:xxhash-rust"
]
finalized_state             = ["dep:bijective-enum-map", "dep:subslice-to-array"]
biome_state                 = ["dep:bijective-enum-map"]
blending_data               = []
actor_digest                = ["actor_id", "dep:subslice-to-array"]
flat_world_layers           = ["dep:prismarine-anchor-util", "dep:log"]
level_spawn_was_fixed       = ["dep:log"]
