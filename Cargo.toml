[workspace]
resolver = "2"
members = [
    "prismarine-anchor-editor",
    "prismarine-anchor-leveldb-entries",
    "prismarine-anchor-leveldb-values",
    "prismarine-anchor-macros",
    "prismarine-anchor-nbt",
    "prismarine-anchor-translation",
    "prismarine-anchor-translators",
    "prismarine-anchor-util",
    "prismarine-anchor-world",
]

[workspace.package]
license = "MIT OR Apache-2.0"
version = "0.1.0"
edition = "2024"
rust-version = "1.85"

# Some of this toml is copied from egui's repository,
# it's my go-to large multicrate example project

[profile.release]
# lto = true # VERY slightly smaller wasm
# opt-level = 's' # 10-20% smaller wasm compared to `opt-level = 3`
# opt-level = 1 # very slow and big wasm. Don't do this.
opt-level = 2 # fast and small wasm, basically same as `opt-level = 's'`
# opt-level = 3 # unnecessarily large wasm for no performance gain

# debug = true # include debug symbols, useful when profiling wasm

# Note: will probably not ultimately use this for Prismarine Anchor,
# we should instead catch the unwind and try to save data to avoid losing everything from a crash,
# maybe. For now, whatever.
# Original comment:
# This leads to better optimizations and smaller binaries (and is the default in Wasm anyways).
panic = "abort"

[profile.dev]
# Can't leave this on by default, because it breaks the Windows build.
# Related: https://github.com/rust-lang/cargo/issues/4897
# split-debuginfo = "unpacked" # faster debug builds on mac
opt-level = 1                # Make debug builds run faster

[profile.dev.package."*"]
# Optimize all dependencies even in debug builds (does not affect workspace packages):
opt-level = 2

[workspace.dependencies]
prismarine-anchor-editor          = { version = "0.1.0", path = "./prismarine-anchor-editor"          }
prismarine-anchor-leveldb-entries = { version = "0.1.0", path = "./prismarine-anchor-leveldb-entries" }
prismarine-anchor-leveldb-values  = { version = "0.1.0", path = "./prismarine-anchor-leveldb-values"  }
prismarine-anchor-macros          = { version = "0.1.0", path = "./prismarine-anchor-macros"          }
prismarine-anchor-nbt             = { version = "0.1.0", path = "./prismarine-anchor-nbt"             }
prismarine-anchor-translation     = { version = "0.1.0", path = "./prismarine-anchor-translation"     }
prismarine-anchor-translators     = { version = "0.1.0", path = "./prismarine-anchor-translators"     }
prismarine-anchor-util            = { version = "0.1.0", path = "./prismarine-anchor-util"            }
prismarine-anchor-world           = { version = "0.1.0", path = "./prismarine-anchor-world"           }

# TODO: bisect the earliest version of tolnay's crates that work here
anyhow              = "1"
# This is my own crate! Woo! counting this as external to prismarine anchor, though
bijective-enum-map  = "0.1.0"
byteorder           = "1.5.0"
cesu8               = "1.1.0"
flate2              = { version = "1.1.0", default-features = false, features = ["zlib-rs"] }
float-cmp           = { version = "0.10.0", default-features = false, features = ["num-traits"] }
getrandom           = { version = "0.2", default-features = false }
indexmap            = { version = "2.7.1", features = ["serde"] }
log                 = "0.4.27"
proc-macro2         = "1"
quote               = "1"
rusty-leveldb       = { version = "3.0.2", default-features = false }
serde               = "1"
# I'm trying to be as flexible as possible with Tolnay's crates that have
# a reputation for remaining very stable, though a bug involving raw identifiers
# like r#type was patched in 1.0.73.
# Overall, hopefully a consumer of crates here would be using up-to-date versions anyway.
serde_json          = "1.0.73"
# This is also my own crate
subslice-to-array   = "0.1.2"
syn                 = "2"
thiserror           = "2"
unicode_names2      = "1.3.0"
# Appears to be taken off GitHub? Can still read source on docs.rs
# Just in case, I'm forcing the version to be exactly 2.2.0, probably unnecessary
varint-rs           = "=2.2.0"
vecmap-rs           = "0.2.3"
web-time            = "1.1.0"
xxhash-rust         = { version = "0.8.15", default-features = false, features = ["xxh64"] }
zerocopy            = "0.8.24"
zip                 = { version = "2.5.0", default-features = false, features = [
                        "deflate-flate2", "flate2", "time"
                    ] }

# enum-map = "2.7.3"
# smallvec = "1.14.0"

[workspace.lints.rust]
elided_lifetimes_in_paths = "warn"
future_incompatible = { level = "warn", priority = -1 }
missing_debug_implementations = "warn"
nonstandard_style = { level = "warn", priority = -1 }
rust_2018_idioms = { level = "warn", priority = -1 }
rust_2021_prelude_collisions = "warn"
semicolon_in_expressions_from_macros = "warn"
trivial_numeric_casts = "warn"
unexpected_cfgs = "warn"
unreachable_pub = "warn"
unsafe_code = "warn"
unsafe_op_in_unsafe_fn = "warn"
unused_extern_crates = "warn"
unused_import_braces = "warn"
unused_lifetimes = "warn"

[workspace.lints.clippy]
# Most of these lints are copied from egui's repo, or valence's repo
allow_attributes = "warn"
as_ptr_cast_mut = "warn"
as_underscore = "warn"
await_holding_lock = "warn"
case_sensitive_file_extension_comparisons = "warn"
cast_lossless = "warn"
char_lit_as_u8 = "warn"
checked_conversions = "warn"
clear_with_drain = "warn"
cloned_instead_of_copied = "warn"
copy_iterator = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
derive_partial_eq_without_eq = "warn"
disallowed_macros = "warn"                  # See clippy.toml
disallowed_methods = "warn"                 # See clippy.toml
disallowed_names = "warn"                   # See clippy.toml
disallowed_script_idents = "warn"           # See clippy.toml
disallowed_types = "warn"                   # See clippy.toml
doc_link_with_quotes = "warn"
doc_markdown = "warn"
empty_enum = "warn"
empty_enum_variants_with_brackets = "warn"
empty_structs_with_brackets = "warn"
enum_glob_use = "warn"
equatable_if_let = "warn"
exit = "warn"
expl_impl_clone_on_copy = "warn"
explicit_deref_methods = "warn"
explicit_into_iter_loop = "warn"
explicit_iter_loop = "warn"
fallible_impl_from = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp_const = "warn"
fn_params_excessive_bools = "warn"
fn_to_numeric_cast_any = "warn"
format_push_string = "warn"
from_iter_instead_of_collect = "warn"
get_unwrap = "warn"
if_let_mutex = "warn"
ignored_unit_patterns = "warn"
impl_trait_in_params = "warn"
implicit_clone = "warn"
implied_bounds_in_impls = "warn"
imprecise_flops = "warn"
inconsistent_struct_constructor = "warn"
index_refutable_slice = "warn"
inefficient_to_string = "warn"
infinite_loop = "warn"
into_iter_without_iter = "warn"
invalid_upcast_comparisons = "warn"
iter_filter_is_ok = "warn"
iter_filter_is_some = "warn"
iter_not_returning_iterator = "warn"
iter_on_empty_collections = "warn"
iter_on_single_items = "warn"
iter_over_hash_type = "warn"
iter_without_into_iter = "warn"
large_digit_groups = "warn"
large_include_file = "warn"
large_stack_arrays = "warn"
large_stack_frames = "warn"
large_types_passed_by_value = "warn"
let_unit_value = "warn"
linkedlist = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
manual_assert = "warn"
manual_clamp = "warn"
manual_instant_elapsed = "warn"
manual_is_power_of_two = "warn"
manual_is_variant_and = "warn"
manual_let_else = "warn"
manual_ok_or = "warn"
manual_string_new = "warn"
map_err_ignore = "warn"
map_flatten = "warn"
match_bool = "warn"
match_on_vec_items = "warn"
match_same_arms = "warn"
match_wild_err_arm = "warn"
match_wildcard_for_single_variants = "warn"
mem_forget = "warn"
mismatching_type_param_order = "warn"
missing_assert_message = "warn"
missing_enforced_import_renames = "warn"
# TODO: enable this
# missing_errors_doc = "warn"
missing_fields_in_debug = "warn"
missing_safety_doc = "warn"
mixed_attributes_style = "warn"
mixed_read_write_in_expression = "warn"
multiple_inherent_impl = "warn"
mut_mut = "warn"
mutex_atomic = "warn"
mutex_integer = "warn"
needless_bitwise_bool = "warn"
needless_borrow = "warn"
needless_continue = "warn"
needless_for_each = "warn"
needless_pass_by_ref_mut = "warn"
needless_pass_by_value = "warn"
needless_raw_string_hashes = "warn"
needless_raw_strings = "warn"
negative_feature_names = "warn"
no_mangle_with_rust_abi = "warn"
non_zero_suggestions = "warn"
nonstandard_macro_braces = "warn"
option_as_ref_cloned = "warn"
option_option = "warn"
path_buf_push_overwrite = "warn"
print_stderr = "warn"
pathbuf_init_then_push = "warn"
ptr_as_ptr = "warn"
ptr_cast_constness = "warn"
pub_underscore_fields = "warn"
pub_without_shorthand = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
readonly_write_lock = "warn"
redundant_feature_names = "warn"
redundant_type_annotations = "warn"
ref_as_ptr = "warn"
ref_option_ref = "warn"
ref_patterns = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_functions_in_if_condition = "warn"
semicolon_if_nothing_returned = "warn"
semicolon_outside_block = "warn"
set_contains_or_insert = "warn"
should_panic_without_expect = "warn"
single_char_pattern = "warn"
single_match_else = "warn"
str_split_at_newline = "warn"
str_to_string = "warn"
string_add = "warn"
string_add_assign = "warn"
string_lit_as_bytes = "warn"
string_lit_chars_any = "warn"
string_to_string = "warn"
struct_field_names = "warn"
suspicious_command_arg_space = "warn"
suspicious_xor_used_as_pow = "warn"
tests_outside_test_module = "warn"
# TODO: warn about presence of `todo!()`
# todo = "warn"
too_many_lines = "warn"
too_long_first_doc_paragraph = "warn"
trailing_empty_array = "warn"
trait_duplication_in_bounds = "warn"
trivially_copy_pass_by_ref = "warn"
try_err = "warn"
tuple_array_conversions = "warn"
unchecked_duration_subtraction = "warn"
undocumented_unsafe_blocks = "warn"
unimplemented = "warn"
uninhabited_references = "warn"
uninlined_format_args = "warn"
unnecessary_box_returns = "warn"
unnecessary_join = "warn"
unnecessary_literal_bound = "warn"
unnecessary_safety_doc = "warn"
unnecessary_self_imports = "warn"
unnecessary_struct_initialization = "warn"
unnecessary_wraps = "warn"
unneeded_field_pattern = "warn"
unnested_or_patterns = "warn"
unseparated_literal_suffix = "warn"
unused_peekable = "warn"
unused_rounding = "warn"
unused_self = "warn"
unused_trait_names = "warn"
unwrap_used = "warn"
use_self = "warn"
used_underscore_binding = "warn"
useless_transmute = "warn"
verbose_file_reads = "warn"
wildcard_dependencies = "warn"
zero_sized_map_values = "warn"

from_str_radix_10 = "allow"
let_with_type_underscore = "allow"
manual_range_contains = "allow"
map_unwrap_or = "allow"
unwrap_or_default = "allow"
