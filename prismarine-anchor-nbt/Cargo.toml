[package]
name = "prismarine-anchor-nbt"
authors = ["Finley Huggins"]
version.workspace = true
edition.workspace = true
rust-version.workspace = true
license = "" # Will probably be MIT OR Apache-2.0.

# Note that licenses of dependencies include:
# Unicode-3.0       - no copies of their Data Files or Software are included here,
# Unicode-DFS-2016    we just use a unicode library (without modifying said library).
#                     No action needed.
# Apache-2.0        - the only dependency requiring Apache-2.0 (without 'OR [something]')
#                     has no NOTICE file
# MIT               - requires copyright notice for all substantial portions of code;
#                     here, the license file for quartz_nbt needed to be included
# Zlib              - no req's if you don't modify their code

[dependencies]
anyhow      .workspace = true
byteorder   .workspace = true
cesu8       .workspace = true
flate2      .workspace = true
thiserror   .workspace = true
varint-rs   .workspace = true

float-cmp       = { workspace = true, optional = true }
indexmap        = { workspace = true, optional = true }
serde           = { workspace = true, optional = true }
unicode_names2  = { workspace = true, optional = true }

[features]
default = [ "allow_list_root", "named_escapes" ]
# Need to actually use document_features for the below comments to be visible in the generated docs

## If enabled, Compound tags will preserve the order of their elements.
preserve_order      = [ "indexmap" ]
## Provides an NBT tag wrapper implementing `Eq`, `Ord`, and `Hash`.
comparable          = []
## Provides approximate float comparisons for `ComparableNbtTag`.
float_cmp           = [ "comparable", "float-cmp" ]

## Adds support for the `\N{name}` named Unicode escapes described in the Java 1.21.5 spec
named_escapes       = [ "unicode_names2" ]
## Adds NBT IO parsing and writing functions that allow a List to be the root node.
## Such a root node is sometimes used by Minecraft Bedrock Edition.
allow_list_root     = []
## If enabled, the maximum nesting depth limit used when parsing or writing NBT or SNBT data can
## be configured via additional functions for parsing and writing. Note that the default limit
## is what Minecraft uses, 512.
configurable_depth  = []

#! ### Nonstandard Features
#! The following features add additional parsing and writing functions for NBT bytes
#! (such as NBT files) that are not used by any version of Minecraft, and probably
#! not by any other NBT parsing library.
#! Only use these nonstandard options if you have a reason to; they are included here
#! because they are simple to implement, and plausibly useful, not because they are important.

## Adds functions that read and write NbtTags of any variant to or from bytes (e.g. a file).
allow_any_root      = [ "allow_list_root" ]
## Adds functions that read and write NbtTags of any variant to or from NBT bytes
## (e.g. an NBT file) which do not give the root node a name.
allow_unnamed_root  = [ "allow_any_root" ]
